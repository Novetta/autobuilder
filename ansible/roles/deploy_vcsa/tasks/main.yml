---
# tasks file for deploy_vcsa
- name: Retrieve info about the mount directory
  stat:
    path: "{{ mount_dir }}"
  register: mount_dir_stat_first

- name: Create a directory to mount the iso file
  file:
    path: "{{ mount_dir }}"
    state: directory
    mode: 0777
  when: mount_dir_stat_first.stat.exists == False

- name: Check if iso is already mounted
  stat:
    path: "{{ mount_dir }}"
  register: mount_dir_stat_created

- name: Mount vCSA iso to "{{ mount_dir }}"
  mount:
    path: "{{ mount_dir }}"
    src: "{{ iso_dir }}/{{ vcsa_iso }}"
    fstab: /dev/null
    fstype: iso9660
    opts: ro,loop
    state: mounted
  when: mount_dir_stat_created.stat.wusr == True

- name: Creating a Working Directory
  file:
    path: "{{ work_dir }}"
    state: directory
    mode: 0777

- name: Copying contents to working Directory
  synchronize:
    src: "{{ mount_dir }}/"
    dest: "{{ work_dir }}/"
  delegate_to: localhost

- name: Copying config.json to working directory
  template:
    src: config.json.j2
    dest: "{{ work_dir }}/vcsa-cli-installer/lin64/config.json"

- name: deployment of vcsa
  shell: ./vcsa-deploy install --no-esx-ssl-verify --accept-eula --acknowledge-ceip "{{ work_dir }}/vcsa-cli-installer/lin64/config.json"
  args:
    chdir: "{{ work_dir }}/vcsa-cli-installer/lin64/"

- name: Unmount vCSA iso from "{{ mount_dir }}"
  mount:
    path: "{{ mount_dir }}"
    state: absent

- name: create datacenter
  community.vmware.vmware_datacenter:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_admin_user }}@{{ vcenter_domain }}"
    password: "{{ sso_password }}"
    datacenter_name: "{{ datacenter_name }}"
    validate_certs: false
    state: present
  delegate_to: localhost

- name: Create Cluster
  community.vmware.vmware_cluster:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_admin_user }}@{{ vcenter_domain }}"
    password: "{{ sso_password }}"
    datacenter_name: "{{ datacenter_name }}"
    cluster_name: "{{ cluster_name }}"
    validate_certs: false
  delegate_to: localhost

- name: Add ESXi Host to vCenter
  community.vmware.vmware_host:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_admin_user }}@{{ vcenter_domain }}"
    password: "{{ sso_password }}"
    datacenter: "{{ datacenter_name }}"
    cluster: "{{ cluster_name }}"
    esxi_hostname: "{{ esxi_hostname }}"
    esxi_username: "{{ esxi_username }}"
    esxi_password: "{{ esxi_password }}"
    validate_certs: false
    state: present
  delegate_to: localhost

  - name: check if already domain joined
    expect:
      echo: yes
      command: >
        ssh "{{ vcenter_user }}@{{ vcenter_server }}"
        shell /opt/likewise/bin/domainjoin-cli
        query
      responses:
        Password: "{{ vcenter_password }}"
    register: domain_joined
    delegate_to: localhost

- name: configure likewise
  expect:
    echo: yes
    command: >
      ssh "{{ vcenter_os_user }}@{{ vcenter_hostname }}"
      shell /opt/likewise/bin/domainjoin-cli
      join "{{ domain }}"
      "{{ ad_user }}" "{{ ad_password }}"
    responses:
      Password: "{{ vcenter_password }}"
  when: domain_joined.stdout.find('{{ domain|upper }}') == -1
  delegate_to: localhost

- name: check if identity provider already configured
  expect:
    echo: yes
    command: >
      ssh "{{ vcenter_user }}@{{ vcenter_server }}"
      shell /opt/vmware/bin/sso-config.sh
      -get_identity_sources
    responses:
      Password: "{{ vcenter_password }}"
  register: identity_joined
  delegate_to: localhost
      
- name: add identity provider
  expect:
    echo: yes
    command: >
      ssh "{{ vcenter_os_user }}@{{ vcenter_hostname }}"
      shell /opt/vmware/bin/sso-config.sh
      -add_identity_source
      -type "{{ identity_type }}"
      -domain "{{ domain }}"
    responses:
      Password: "{{ vcenter_password }}"
  when: identity_joined.stdout.find('{{ domain }}') == -1
  delegate_to: localhost

- name: enable vcenter ha
  community.vmware.vmware_cluster_ha:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}@{{ vcenter_domain }}'
    password: '{{ vcenter_password }}'
    datacenter_name: '{{ datacenter_name }}'
    cluster_name: '{{ cluster_name }}'
    apd_response: disabled
    pdl_response: disabled
    ha_vm_monitoring: vmMonitoringDisabled
    advanced_settings:
      'das.ignoreInsufficientHbDatastore': 'true'
      'das.ignoreRedundantNetWarning': 'true'
    reservation_based_admission_control:
      auto_compute_percentages: false
      cpu_failover_resources_percent: 5
      failover_level: 2
      memory_failover_resources_percent: 5
    enable_ha: true
    validate_certs: false
  delegate_to: localhost
  
- name: enable vcenter drs
  community.vmware.vmware_cluster_drs:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}@{{ vcenter_domain }}'
    password: '{{ vcenter_password }}'
    datacenter_name: '{{ datacenter_name }}'
    cluster_name: '{{ cluster_name }}'
    drs_default_vm_behavior: partiallyAutomated
    enable_drs: true
    validate_certs: false
  delegate_to: localhost
  
